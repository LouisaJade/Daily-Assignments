---
title: "Ecosystem Science and Sustainability 330"
author: 
  - name: Louisa Beckett
format: html
subtitle: 'Quantitative Reasoning for Ecosystem Science'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## COVID-19 Data

### Data

We are going to practice some data wrangling skills using a real-world dataset about COVID cases curated and maintained by the New York Times. The data has been used to create reports and data visualizations like [this](https://www.nytimes.com/interactive/2020/us/coronavirus-spread.html?referringSource=articleShare), and are archived on a GitHub repo [here](https://github.com/nytimes/covid-19-data). Looking at the README in this repository we read:

> "We are providing two sets of data with cumulative counts of coronavirus cases and deaths: one with our most current numbers for each geography and another with historical data showing the tally for each day for each geography ... the historical files are the final counts at the end of each day ... The historical and live data are released in three files, one for each of these geographic levels: U.S., states and counties. A smaller file with only the most recent 30 days of data is also available"

For this lab we will use the historic, recent, country level data which is stored as an updating CSV at this URL:

```{r, eval = FALSE}
https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv
```

### Start

I will get you started this week, in the following code chunk, I am attaching the tidyverse package; saving the NY-Times URL as a value called "url"; and I am reading that URL into an object called `covid`

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
url = 'https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties-recent.csv'
covid = read_csv(url)
head(covid, 5)
```

Hint: You can print the top X rows of a `data.frame` with `slice`.

```{r, eval = FALSE}
slice(covid, 1:5)
```

to print the top 5 columns of the raw covid `object`

## Question 1: 

Use `dplyr` verbs to  create a data.frame of the **5** counties with the most current cases. Remember, the cases and deaths are cumulative, so you only need to deal with the data for the most current (`max`) date.

(**Hint:** `filter`, `arrange`,  `slice`)

```{r}
> top_5_counties
        date        county      state  fips   cases deaths
1 2023-03-23   Los Angeles California  6037 3723182  35960
2 2023-03-23 New York City   New York    NA 3252967  45123
3 2023-03-23    Miami-Dade    Florida 12086 1547142  12324
4 2023-03-23          Cook   Illinois 17031 1541156  15884
5 2023-03-23      Maricopa    Arizona  4013 1533874  18877
```

## Question 2:

Use dplyr verbs to create a data.frame of the **5** states with the *most* cases current cases.

(**Hint:** filter, group_by, summarize, arrange, slice)

```{r}
top_5_states
# A tibble: 5 × 2
  state      total_cases
  <chr>            <int>
1 California    12169158
2 Texas          8447233
3 Florida        7542869
4 New York       6805271
5 Illinois       4107931
```

## Question 3:

Use the `dplyr` verbs to report the **5** counties with the *worst* current death/cases ratio: (e.g.$100* (deaths/cases)$)

(**Hint:** You will need to remove those where `cases == 0` and `county == Unknown`) (**Hint:** `filter`, `mutate`, `arrange`, `slice`)

```{r}
worst_ratio_counties
        date county  state  fips cases deaths death_case_ratio
1 2023-02-22 Storey Nevada 32029   196     14         7.142857
2 2023-02-23 Storey Nevada 32029   196     14         7.142857
3 2023-02-24 Storey Nevada 32029   196     14         7.142857
4 2023-02-25 Storey Nevada 32029   196     14         7.142857
5 2023-02-26 Storey Nevada 32029   196     14         7.142857
```

## Question 4:

Use the `dplyr` verbs to report the **5** states with the *worst* current death/case ratio.

(**Hint:** `filter`, `group_by`, `summarize`, `mutate`, `arrange`, `slice`)

```{r}
worst_ratio_states
# A tibble: 5 × 4
  state        total_cases total_deaths death_case_ratio
  <chr>              <int>        <int>            <dbl>
1 Pennsylvania   105742603      1513172             1.43
2 Michigan        91601656      1263243             1.38
3 Georgia         89344634      1228256             1.37
4 Nevada          26689808       361859             1.36
5 Arizona         73274449       993047             1.36
```
